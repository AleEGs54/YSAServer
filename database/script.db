-- Base de datos para la conferencia JAS, 2025
-- Asumiendo que la base de datos ya existe o la creas aparte

-- Crear esquema
CREATE SCHEMA IF NOT EXISTS conferencia_jas;

SET search_path TO conferencia_jas;

-- Crear tipos ENUM
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sex_enum') THEN
    CREATE TYPE sex_enum AS ENUM ('M', 'F');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'shirt_size_enum') THEN
    CREATE TYPE shirt_size_enum AS ENUM ('XS', 'S', 'M', 'L', 'XL', 'XXL');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'role_name_enum') THEN
    CREATE TYPE role_name_enum AS ENUM ('Coordinadores', 'STAFF', 'Líder JAS Estaca', 'Líder JAS Barrio', 'Miembro Auxiliar');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'action_enum') THEN
    CREATE TYPE action_enum AS ENUM ('INSERT', 'UPDATE', 'DELETE');
  END IF;
END $$;

-- Tabla participant
CREATE TABLE IF NOT EXISTS participant (
  participant_id SERIAL PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  preferred_name VARCHAR(45) NOT NULL,
  dob DATE NOT NULL,
  sex sex_enum NOT NULL,
  mobile_number VARCHAR(15) NOT NULL,
  age INT NOT NULL,
  stake VARCHAR(45) NOT NULL,
  ward VARCHAR(45) NOT NULL,
  blood_type VARCHAR(45) NOT NULL,
  allergies TEXT NOT NULL,
  treatment TEXT NOT NULL,
  diabetic_or_asthathic TEXT NOT NULL,
  health_insurance VARCHAR(100) NOT NULL,
  covid_vaccine_doses VARCHAR(45) NOT NULL,
  shirt_size shirt_size_enum NOT NULL,
  member_of_church BOOLEAN NOT NULL DEFAULT TRUE,
  payment BOOLEAN DEFAULT FALSE
);

-- Tabla leadership_role (sin guion, uso underscore)
CREATE TABLE IF NOT EXISTS leadership_role (
  staff_role_id SERIAL PRIMARY KEY,
  role_name role_name_enum NOT NULL
);

-- Tabla leadership_member
CREATE TABLE IF NOT EXISTS leadership_member (
  leadership_member_id SERIAL PRIMARY KEY,
  participant_id INT NOT NULL,
  staff_role_id INT NOT NULL,
  CONSTRAINT fk_leadership_members_participant FOREIGN KEY (participant_id)
    REFERENCES participant(participant_id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_leadership_member_leadership_role FOREIGN KEY (staff_role_id)
    REFERENCES leadership_role(staff_role_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabla emergency_contacts
CREATE TABLE IF NOT EXISTS emergency_contacts (
  emergency_contacts_id SERIAL PRIMARY KEY,
  first_name VARCHAR(45) NOT NULL,
  last_name VARCHAR(45) NOT NULL,
  email VARCHAR(45) NOT NULL,
  mobile_number VARCHAR(45) NOT NULL,
  participant_id INT NOT NULL,
  CONSTRAINT fk_emergency_contacts_participant FOREIGN KEY (participant_id)
    REFERENCES participant(participant_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabla participant_audit
CREATE TABLE IF NOT EXISTS participant_audit (
  participant_audit_id SERIAL PRIMARY KEY,
  participant_id INT NOT NULL,
  action action_enum NOT NULL,
  changed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  changed_by INT NOT NULL,
  old_values JSON NOT NULL,
  new_values JSON NOT NULL
);